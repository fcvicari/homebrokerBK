// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String  @id @default(cuid())
  name           String
  email          String
  password       String
  avatar         String?
  active         Boolean @default(false)
  activeWalletId String? @unique
  activeWallet   Wallet? @relation("ActiveWallet", fields: [activeWalletId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  usersTokens UsersToken[]
  wallets     Wallet[]
  orders      Order[]

  @@unique([email])
}

model UsersToken {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userID], references: [id])
  userID    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Wallet {
  id        String   @id @default(cuid())
  name      String
  user      User     @relation(fields: [userID], references: [id])
  userID    String
  /// Current total balance
  balance   Float    @default(0)
  /// Total amount invested
  amount    Float    @default(0)
  /// Total amount of dividends received
  dividends Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders       Order[]
  walletAssets WalletAsset[]
  activeUser   User?         @relation("ActiveWallet")
}

model Assets {
  id          String        @id @default(cuid())
  name        String
  symbol      String
  image       String?
  price       Float         @default(0)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  WalletAsset WalletAsset[]
  Order       Order[]

  @@unique([symbol])
}

model WalletAsset {
  id        String   @id @default(cuid())
  wallet    Wallet   @relation(fields: [walletID], references: [id])
  walletID  String
  asset     Assets   @relation(fields: [assetID], references: [id])
  assetID   String
  quantity  Float    @default(0)
  avgPrice  Float    @default(0)
  amount    Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([walletID, assetID])
}

model Order {
  id            String      @id @default(uuid())
  orderNumber   String      @unique
  assetId       String
  priceExec     Float
  quantityExec  Float
  userId        String
  walletId      String
  status        OrderStatus
  orderType     OrderType
  priceOrder    Float
  quantityOrder Float
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  wallet Wallet @relation(fields: [walletId], references: [id])
  asset  Assets @relation(fields: [assetId], references: [id])
}

enum OrderStatus {
  OPEN
  PARTIALLY_EXECUTED
  EXECUTED
  CANCELED
}

enum OrderType {
  BUY
  SELL
}
